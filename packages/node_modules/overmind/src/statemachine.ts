import { PATH, VALUE } from 'proxy-state-tree'

import { deepCopy } from './utils'
import { IState } from '.'

type TState = {
  current: string
} & {
  [key: string]: IState | Statemachine<any, any>
}

type TEvents = {
  type: string
  data?: any
}


export type StatemachineTransitions<States extends TState, Events extends TEvents> = {
  [Type in Events["type"]]: ((state: States, payload: Events extends { type: Type } ? Events["data"] : never) =>  States["current"] | void)
}

export interface MachineMethods<States extends TState, Events extends TEvents> {
  matches<T extends States["current"]>(
    current: T,
  ): Statemachine<States extends { current: T} ? States : never, Events> | undefined
  send<T extends Events["type"]>(
    ...args: Events extends { type: T, data: any } ? [T, Events["data"]] : [T]
  ): Statemachine<States extends { current: T} ? States : never, Events> | undefined
}

export type Statemachine<States extends TState, Events extends TEvents> = States & MachineMethods<States, Events>

const INITIAL_STATE = Symbol('INITIAL_STATE')
const TRANSITIONS = Symbol('TRANSITIONS')
const STATE = Symbol('STATE')
const IS_DISPOSED = Symbol('IS_DISPOSED')

export class StateMachine<State extends TState, Events extends TEvents>  {
  current: State["current"]
  private [INITIAL_STATE]: State["current"]
  private [TRANSITIONS]: StatemachineTransitions<State, Events>
  private [STATE]: any
  private [IS_DISPOSED] = false
  private clone() {
    return new StateMachine(this[TRANSITIONS], deepCopy(this[STATE]))
  }
  private dispose() {
    Object.keys(this[VALUE]).forEach((key) => {
      if (this[VALUE][key] instanceof StateMachine) {
        this[key].dispose()
      }
    })
    this[VALUE][IS_DISPOSED] = true
  }
  constructor(transitions: StatemachineTransitions<State, Events>, state: State) {
    this[STATE] = state
    this[INITIAL_STATE] = state.current
    this[TRANSITIONS] = transitions
    Object.assign(this, state)
  }
  send(type, data) {
    if (this[VALUE][IS_DISPOSED]) {
      if (process.env.NODE_ENV === 'development') {
        console.warn(`Overmind - The statemachine at "${this[PATH]}" has been disposed, but you tried to transition on it`)
      }
      return
    }

    const transition = this[VALUE][TRANSITIONS][type]

    const result = transition(this, data)

    if (result) {
      this.current = result
    }

    return
  }
  matches(state: any) {
    if (this.current === state) {
      return this
    }
  }
}

export type StatemachineFactory<States extends TState, Events extends TEvents> = {
  create(state: States): Statemachine<States, Events> 
}

export function statemachine<States extends TState, Events extends TEvents = never>(transitions: StatemachineTransitions<States, Events>): StatemachineFactory<States, Events> {
   return {
     create(state) {
      return new StateMachine(transitions, state as any) as any
     }
   }
}
